doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title What the hell are Web Components

    link(href='http://fonts.googleapis.com/css?family=Open+Sans', rel='stylesheet', type='text/css')
    link(href='http://fonts.googleapis.com/css?family=Patua+One', rel='stylesheet' type='text/css')
    link(rel='stylesheet', type='text/css', href='build/build.css')

  body

    article

      section(data-bespoke-state="title")
        div
          h1
            | Web Components
            br
            | ===
            br
            | Microservices
          address.vcard
            div.author.fn Tim Perry
            div.note.bio
              span Tech Lead &amp; Open-Source Champion at&nbsp;
              span.org.vcard
                a.org.fn.url(href='http://softwire.com',rel="group") Softw<span class="i">i</span>re
            ul.urls
              li
                a.url(href='http://tim-perry.co.uk',rel="me") tim-perry.co.uk
              li
                a.url(href='http://github.com/pimterry',rel="me") github.com/pimterry
              li
                a.nickname.url(href='http://twitter.com/pimterry',rel="me") @pimterry
        aside
          ul
            li Good afternoon
            li Tim Perry, I work at Softwire
            li Talking about web components & microservices
            li High-speed intro covering a lot of ground, not a how to
            li Some examples of these in action
            li And I want to talk about how these are related, and how that's useful more generally

      section
        img(src='/images/softwireLogo.png',class='logo-big',alt='Softwire')

      section
        h2 Web Components

        | <template id="navbar">
        |  <style>@import 'http://getbootstrap.com/dist/css/bootstrap.min.css';</style>
        |  <div class="bs-example bs-navbar-top-example">
        |    <nav class="navbar navbar-default navbar-inverse" role="navigation">
        |      <div class="container-fluid">
        |        <div class="navbar-header">
        |          <button type="button" class="navbar-toggle collapsed"
        |                  data-toggle="collapse"
        |                  data-target="#bs-example-navbar-collapse-6">
        |            <span class="sr-only">Toggle navigation</span>
        |            <span class="icon-bar"></span>
        |            <span class="icon-bar"></span>
        |            <span class="icon-bar"></span>
        |          </button>
        |          <a class="navbar-brand" href="#">Brand</a>
        |        </div>
        |        <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-6">
        |          <ul class="nav navbar-nav">
        |            <li class="active"><a href="#">Home</a></li>
        |            <li><a href="#">Link</a></li>
        |            <li><a href="#">Link</a></li>
        |          </ul>
        |        </div>
        |      </div>
        |    </nav>
        |  </div>
        | </template>
        | <div class="navbar-target" style="width: 100%"></div>
        | <script defer async>
        |  window.setTimeout(function () {
        |   var template = document.querySelector("template#navbar");
        |   var target = document.querySelectorAll(".navbar-target");
        |   [].forEach.call(target, function(t) {
        |     var shadow = t.createShadowRoot();
        |     shadow.appendChild(document.importNode(template.content, true));
        |   });
        |  }, 0);
        | </script>

      section
        h2 Web Components

        | <div class="navbar-target" style="width: 100%"></div>

        pre(style='height: 70%; overflow-x: hidden')
          code.language-markup.
            &lt;div class="bs-example bs-navbar-top-example"&gt;
              &lt;nav class="navbar navbar-default navbar-inverse" role="navigation"&gt;
                &lt;div class="container-fluid"&gt;
                  &lt;div class="navbar-header"&gt;
                    &lt;button type="button" class="navbar-toggle collapsed"
                            data-toggle="collapse"
                            data-target="#bs-example-navbar-collapse-6"&gt;
                      &lt;span class="sr-only"&gt;Toggle navigation&lt;/span&gt;
                      &lt;span class="icon-bar"&gt;&lt;/span&gt;
                      &lt;span class="icon-bar"&gt;&lt;/span&gt;
                      &lt;span class="icon-bar"&gt;&lt;/span&gt;
                    &lt;/button&gt;
                    &lt;a class="navbar-brand" href="/"&gt;Brand&lt;/a&gt;
                  &lt;/div&gt;

                  &lt;div class="collapse navbar-collapse" id="bs-example-navbar-collapse-6"&gt;
                    &lt;ul class="nav navbar-nav"&gt;
                      &lt;li class="active"&gt;&lt;a href="/1"&gt;Home&lt;/a&gt;&lt;/li&gt;
                      &lt;li&gt;&lt;a href="/2"&gt;Link&lt;/a&gt;&lt;/li&gt;
                      &lt;li&gt;&lt;a href="/3"&gt;Link&lt;/a&gt;&lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
              &lt;/nav&gt;
            &lt;/div&gt;
            
      section
        h2 Web Components
        | <div class="navbar-target" style="width: 60%"></div>
        pre(style="min-width:0")
          code.language-markup.
            &lt;nav-bar&gt;              
              &lt;a href="/"&gt;Brand&lt;/a&gt;
              &lt;ul&gt;
                &lt;li&gt;&lt;a href="/1"&gt;Home&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href="/2"&gt;Link&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href="/3"&gt;Link&lt;/a&gt;&lt;/li&gt;
              &lt;/ul&gt;
            &lt;/nav-bar&gt;

      section
        h2 Web Components
        h3
          ul.bullet
            li
            li &lt;Template&gt;
            li HTML Imports
            li Shadow DOM
            li Custom Elements
        aside
          ul
            li This is a set of 4 new w3c specs

      section
        h2 &lt;Template&gt;
        pre
          code.language-markup.
            &lt;template id="template1"&gt;
              &lt;img src="/default-image.png" /&gt;
              &lt;h3&gt;Cool image!&lt;/h3&gt;
            &lt;/template&gt;

      section
        h2 &lt;Template&gt;
        pre
          code.language-markup.
            &lt;template id="template1"&gt;
              &lt;img src="/default-image.png" /&gt;
              &lt;h3&gt;Cool image!&lt;/h3&gt;
            &lt;/template&gt;

            &lt;script type="text/javascript"&gt;
                var template = document.querySelector("#template1");
                var content = document.importNode(template.content, true);
                document.body.appendNode(content);
            &lt;/script&gt;

      section
        h2 HTML Imports
        div.sideBySide
          div
            h3 index.html
            pre
              code.language-markup.
                &lt;head&gt;
                  &lt;link rel="import"
                        href="import.html" /&gt;
                &lt;/head&gt;
          div
            h3 import.html
            pre
              code.language-markup.
                Some HTML!

                &lt;style&gt;
                  h1 { font-size: 500%; }
                &lt;/style&gt;

                &lt;script&gt;
                window.aThing = function () {
                  ...
                }
                &lt;/script&gt;

      section
        h2 Shadow DOM
        <video src="http://bit.ly/1wMMbE6" controls muted></video>

      section
        h2 Shadow DOM

        div(id="myDiv") Some irrelevant content

        script(type="text/javascript")
          |  var div = document.querySelector("#myDiv")
          |  var shadow = div.createShadowRoot();
          |  shadow.innerHTML = '<h3>Dom-invisible headline!</h3>';

        pre
          code.language-markup.
            &lt;div id="myDiv"&gt;Some irrelevant content&lt;div&gt;

            &lt;script type="text/javascript"&gt;
              var div = document.querySelector("#myDiv")
              var shadow = div.createShadowRoot();

              shadow.innerHTML = '&lt;h3&gt;Dom-invisible headline!&lt;/h3&gt;';
            &lt;/script&gt;

      section
        h2 Shadow DOM
        | <div id="myDiv2">Real content</div>
        | <script>
        | var div = document.querySelector("#myDiv2");
        | var shadow = div.createShadowRoot();
        | shadow.innerHTML = "<i>Originally: <content></content></i>";
        | </script>
        pre
          code.language-markup.
            &lt;div id="myDiv2"&gt;Real content&lt;/div&gt;

            &lt;script type="text/javascript"&gt;
              var div = document.querySelector("#myDiv2")
              var shadow = div.createShadowRoot();

              shadow.innerHTML = "&lt;i&gt;Originally: &lt;content&gt;&lt;/content&gt;&lt;/i&gt;";
            &lt;/script&gt;

      section
        h2 Custom Elements
        pre
          code.language-javascript.
            document.registerElement('nav-bar');

        pre
          code.language-markup.
            &lt;nav-bar&gt;
              &lt;ul&gt;
                &lt;li&gt;Home&lt;/li&gt;
                &lt;li&gt;Link&lt;/li&gt;
                &lt;li&gt;Link&lt;/li&gt;
              &lt;/ul&gt;
            &lt;/nav-bar&gt;

      section
        h2 Custom Elements
        pre
          code.language-javascript.
            var NavBarPrototype = Object.create(HTMLElement.prototype);

            NavBarPrototype.updateContent = function () { ... }

            document.registerElement("nav-bar", {
                prototype: NavBarPrototype
            });

            ...

            document.querySelector("nav-bar").updateContent();

      section
        h2 Custom Elements
        pre
          code.language-javascript.
            var NavBarPrototype = Object.create(HTMLElement.prototype);

            NavBarPrototype.createdCallback = function () { ... }
            NavBarPrototype.attachedCallback = function () { ... }
            NavBarPrototype.detachedCallback = function () { ... }
            NavBarPrototype.attributeChangedCallback = function () { ... }

            document.registerElement('nav-bar', {
                prototype: NavBarPrototype
            });

      section
        h2 Custom Elements
        pre(style='font-size:53%; padding: 15px 16px !important')
          code.language-javascript.
            &lt;template id="navBarTemplate"&gt;
              &lt;div class="bs-example bs-navbar-top-example"&gt;
                &lt;nav class="navbar navbar-default navbar inverse"&gt;
                  ...
                  &lt;content&gt;&lt;/content&gt;
                  ...
                &lt/nav&gt;
              &lt/div&gt;
            &lt;/template&gt;

            &lt;script&gt;
              var NavBarPrototype = Object.create(HTMLElement.prototype);

              NavBarPrototype.createdCallback = function () {
                var template = document.querySelector("#navBarTemplate");
                var content = document.importNode(template.content, true);
                this.createShadowRoot().appendNode(content);
              };

              document.registerElement('nav-bar', {
                  prototype: NavBarPrototype
              });           
            &lt;/script&gt; 

      section
        h2.full-slide Let's see it in action

        h4
          a(href='http://bit.ly/web-components-example') Source at bit.ly/web-components-example
        aside
          ul
            li Site - Compare things, header, items, names, facets
            li Tech - Little bit of knockout, outside the components
            li Otherwise all vanilla JS, not even jQuery
            li Show HTML - ignore data-bind, comments
            li Builds a DOM from our domain language directly, no irrelevant details
            li Show header implementation
            li Show login element
            li Communicates through events
            li Can also communicate through content or attributes
            li DOM becomes communication medium

      section
        h2 Actually using this?
        | <div id="tableWrapper">
        |   <table>
        |     <thead>
        |       <tr>
        |         <th rowspan="2"></th>
        |         <th rowspan="2">Specced</th>
        |         <th colspan="5">Implementation</th>
        |       </tr>
        |       <tr>
        |         <th>Polyfill</th>
        |         <th>Chrome / Opera</th>
        |         <th>Firefox</th>
        |         <th>Safari</th>
        |         <th>IE</th>
        |       </tr>
        |     </thead>
        |     <tbody>
        |       <tr>
        |         <th>Templates</th>
        |         <td class="yes"><a href="https://html.spec.whatwg.org/multipage/scripting.html#the-template-element"></a></td>
        |         <td class="yes"><a href="#polyfills"></a></td>
        |         <td class="yes"><a href="http://www.chromestatus.com/features/5207287069147136">Stable</a></td>
        |         <td class="yes"><a href="http://caniuse.com/#feat=template">Stable</a></td>
        |         <td class="yes"><a href="http://caniuse.com/#feat=template">8</a></td>
        |         <td class="no"></td>
        |       </tr>
        |       <tr>
        |         <th>HTML Imports</th>
        |         <td class="yes"><a href="http://w3c.github.io/webcomponents/spec/imports/"></a></td>
        |         <td class="yes"><a href="#polyfills"></a></td>
        |         <td class="yes"><a href="http://www.chromestatus.com/features/5144752345317376">Stable</a></td>
        |         <td class="kinda"><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=877072">Behind flag</a></td>
        |         <td class="no"></td>
        |         <td class="no"></td>
        |       </tr>
        |       <tr>
        |         <th>Custom Elements</th>
        |         <td class="yes"><a href="http://w3c.github.io/webcomponents/spec/custom/"></a></td>
        |         <td class="yes"><a href="#polyfills"></a></td>
        |         <td class="yes"><a href="http://www.chromestatus.com/features/4642138092470272">Stable</a></td>
        |         <td class="yes"><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=889230">Behind flag</a></td>
        |         <td class="no"></td>
        |         <td class="no"></td>
        |       </tr>
        |       <tr>
        |         <th>Shadow DOM</th>
        |         <td class="yes"><a href="http://w3c.github.io/webcomponents/spec/shadow/"></a></td>
        |         <td class="yes"><a href="#polyfills"></a></td>
        |         <td class="yes"><a href="http://www.chromestatus.com/features/4507242028072960">Stable</a></td>
        |         <td class="yes"><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=806506">Behind flag</a></td>
        |         <td class="no"></td>
        |         <td class="no"></td>
        |       </tr>
        |     </tbody>
        |   </table>
        | </div>
        p (From <a href="http://jonrimmer.github.io/are-we-componentized-yet/">Are We Componentized Yet?</a>)
        aside
          ul
            li Polyfills from 9+
            li Web components are really a pattern though
            li A better way to build the web
            li Lots of frameworks moving this direction
            li This is the future of the web

      section
        h2.fullish-slide Microservices
        aside
          ul
            li Architectural pattern
            li Focused around building your architecture as small standalone processes
            li Best understood in comparison to...

      section
        h2 Monoliths
        img(src='/images/monolith.png', style="width: 600px")
        aside
          ul
            li Common pattern
            li Web app - controllers, views, models, internal logic
            li Easy, obvious, common
            li Downsides: everything is coupled together, no clear interfaces
            li Easy to get a big ball of mud

      section
        h2 Microservices
        img(src='/images/microservices.png', style="width: 501px")
        aside
          ul
            li Very generic example for contrast, see some specifics soon
            li Small processes
            li One to manage charging your customers
            li managing credit cards
            li auth
            li All calling each other, typically JSON/RESTful HTTP, or simple MQs
            li Explicit interfaces -> clear interactions


      section
        h2 Core principles:
        h3
          ul.bullet
            li
            li Many standalone processes
            li Organised around functionality
            li All highly decoupled
            li Each with a single responsibility
        aside
          ul
            li Frequently a single file, just using express
            li Small enough to understand in one go
            li
            li Focused on functionality, not nouns
            li Easier to stay small, typically more cohesive
            li Charging: take request, send there, record here
            li
            li Decoupling is the main goal here; clear independent segments & interactions
            li Focusing on this makes previous step easier
            li Encapsulates details so they can change: different datastores, languages, etc
            li Notably this makes testing much easier, can drive design nicely with TDD
            li Can test them in combination
            li
            li Important to focus on single responsibility
            li Helps decoupling of services & design

      section
        h2 Deploying all these?
        aside
          ul
            li The obvious challenge
            li Forces you to automate - good thing
            li Once automation is in place, gives lots of power
            li Potential separation
            li Can scale each bit separately, or distribute
            li Can run versions in parallel - A/B testing components
            li HTTP means you can reuse standard tools - LB/caches

      section
        h2 But performance?!?
        aside
          ul
            li People always worry about performance
            li Never as bad as it sounds
            li Firstly, wide, not deep
            li Can often be async - respond to user and kick off billing process in the background
            li Trades minimum latency for scalability
            li Can move things in proc as required - intentional tradeoff

      section
        h2.full-slide Let's see it in action
        h4
          a(href='http://bit.ly/microservices-example') Source at bit.ly/microservices-example
        aside
          ul
            li Note link to source
            li Auth, as seen
            li Once authed, can load a list of comparisons for a user
            li Can load an individual comparison, by click or link, here simple but GUID in real life
            li Can add & update items or facets
            li Notably not all authed, listing & changing a comparison (the facets) needs permissions
            li Comparisons are public if you go directly
            li As is adding items, since that's actually not tied to a single comp
            li Explain list of services
            li Show auth
            li Talk about size of auth
            li Show facet
            li Talk about structure of facet

      section
        img(src='images/comparably-microservices.png', style="width:600px")
        aside
          ul
            li Diagram for that
            li Auth on MongoDB, 2 query and 2 command services on Neo, standalone UI server
            li Looks complicated, pretty simple
            li Static serves UI
            li UI calls command query and auth services, could be facade as this expands
            li All of command and query use Neo, auth uses Mongo
            li Some of C/Q talk to auth service, not all
            li Perhaps clearer if...

      section
        h2 These are not technically the same thing
        aside
          ul
            li Not the same
            li One is a new W3C spec for reusuable UI widgets
            li One is a high-level architectural pattern
            li But two shared principles

      section
        h2 Two Shared Principles
        h3
          ul.bullet
            li
            li Encapsulation by default
            li Interaction through a common medium
        aside
          ul
            li First, process boundary/Shadow DOM
            li Isolation of implementation from app structure
            li Clear interactions
            li Adds pressure for better design, makes it harder <em>not</em> to decouple
            li
            li Second, the interactivity is through a dumb common medium
            li RESTful HTTP and DOM attributes, content & events
            li Microservices & web components interact through the standard tools of their domain
            li Can embed non-WC elements
            li Can use load balancers and caches
            li Can easily debug and understand interfaces of both, just using existing tools
            li
            li Not the first tools to offer this
            li OO pushed encapsulation forward, some platforms too, e.g. JavaBeans
            li JS itself; now a common platform for a wider ecosystem, with a driving culture of small standalone models
            li
            li All pushing towards my final point, the core of the value of all of this

      section
        h2.fullish-slide Modifiability
        h3
          ul.bullet
            li
            li Change things easily, and with confidence
            li Use the best tools for the job
            li Iteratively evolve your implementation
        aside
          ul
            li This gives you modifiability, a term I'm stealing from Martin Fowler
            li A fundamental part of evolutionary design, the ability to effectively iterate on app structure
            li
            li Structure of your application better represents the features of your application, language of your domain
            li Useful, because high-level designs changes much less frequently that low-level implementation
            li Rarely change the fact that you can login to the site
            li Much more likely to change how you login, add 2FA, simplify sign-up process
            li That's exactly what both these designs provide
            li Both structure and implementation can be independently changeable
            li
            li You can use the best tools; components written in React or vanilla.js can interact
            li Rewrite your legacy webservices in Node, or move your algorithmic work to Haskell
            li External interface is understood by everything, rewrites are cheap
            li
            li Web components and microservices and more share these underlying concepts
            li All gives you more and more power to evolve designs with max flexibility, minimizing up-front work


      section(data-bespoke-state="finish")
        div
          h1 Thank you
          address.vcard
            div.author.fn Tim Perry
            div.note.bio
              span Tech Lead &amp; Open-Source Champion at&nbsp;
              span.org.vcard
                a.org.fn.url(href='http://softwire.com',rel="group") Softw<span class="i">i</span>re
            ul.urls
              li
                a.url(href='http://tim-perry.co.uk',rel="me") tim-perry.co.uk
              li
                a.url(href='http://github.com/pimterry',rel="me") github.com/pimterry
              li
                a.nickname.url(href='http://twitter.com/pimterry',rel="me") @pimterry
        aside
          ul
            li Everything I have for you today
            li No time for questions, grab me later or ping me on twitter
            li You should also follow me on twitter if you'd like links to these slides
            li Thanks!

    script(src='build/build.js')